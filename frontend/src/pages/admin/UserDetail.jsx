import React, { useEffect, useMemo, useState } from "react";
import { useParams } from "react-router-dom";
import { apiPost } from "../../shared/api.js";

export default function UserDetail() {
  const { id } = useParams();
  const [data, setData] = useState(null);
  const [status, setStatus] = useState("");
  const [ordered, setOrdered] = useState(false);

  // NEW: –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞–º–∏
  const [qSingle, setQSingle] = useState(""); // –æ–¥–∏–Ω–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å
  const [qBulk, setQBulk] = useState(""); // –º–∞—Å—Å–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞ "Q1 $ Q2 $ Q3"
  const [mode, setMode] = useState("append"); // append | replace
  const questions = useMemo(() => data?.questions || [], [data]);

  useEffect(() => {
    fetch(`/api/admin/users/${id}`, { credentials: "include" })
      .then((r) => r.json())
      .then((d) => {
        setData(d);
        setStatus(d.status || "");
        setOrdered(!!d.ordered);
      });
  }, [id]);

  const saveOrder = async () => {
    await apiPost(`/api/admin/users/${id}/order`, { ordered });
  };
  const saveStatus = async () => {
    await apiPost(`/api/admin/users/${id}/status`, { status: status || null });
  };

  // NEW: –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  const pushQuestions = async () => {
    const body = {
      mode, // append | replace
      questions: qSingle.trim() ? [qSingle.trim()] : [],
      bulk: qBulk, // "Q1 $ Q2 $ Q3"
    };
    const res = await apiPost(`/api/admin/users/${id}/questions`, body);
    // —Ä–µ—Ñ—Ä–µ—à
    const d = await fetch(`/api/admin/users/${id}`, {
      credentials: "include",
    }).then((r) => r.json());
    setData(d);
    setQSingle("");
    setQBulk("");
  };

  // NEW: —É–¥–∞–ª–∏—Ç—å –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å (–ª–æ–∫–∞–ª—å–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å replace)
  const removeQuestionAt = async (idx) => {
    const next = questions.filter((_, i) => i !== idx);
    await apiPost(`/api/admin/users/${id}/questions`, {
      mode: "replace",
      questions: next,
    });
    const d = await fetch(`/api/admin/users/${id}`, {
      credentials: "include",
    }).then((r) => r.json());
    setData(d);
  };

  if (!data) return null;

  return (
    <div className="grid gap-4 md:grid-cols-[320px_1fr]">
      {/* –°–∞–π–¥–±–∞—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π */}
      <aside className="paper p-4">
        <div className="font-serif text-xl mb-1">{data.name}</div>
        <div className="text-muted">{data.email}</div>

        <div className="mt-4">
          <div className="font-semibold mb-2">–û–±–ª–æ–∂–∫–∞</div>
          <div className="cover bg-gradient-to-br from-blush to-lav w-[120px]">
            <div className="meta">{data.cover || "‚Äî"}</div>
          </div>
        </div>

        <div className="mt-4">
          <label className="flex items-center gap-2">
            <input
              type="checkbox"
              checked={ordered}
              onChange={(e) => setOrdered(e.target.checked)}
            />
            –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω
          </label>
          <button className="btn mt-2" onClick={saveOrder}>
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–∫–∞–∑
          </button>
        </div>

        <div className="mt-4">
          <div className="font-semibold mb-2">–°—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏</div>
          <select
            className="input"
            value={status}
            onChange={(e) => setStatus(e.target.value)}
          >
            <option value="">‚Äî –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å ‚Äî</option>
            <option value="in_review">üïí –û–∂–∏–¥–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É</option>
            <option value="in_design">‚úçÔ∏è –í –¥–∏–∑–∞–π–Ω–µ</option>
            <option value="printing">üñ®Ô∏è –ü–µ—á–∞—Ç–∞–µ—Ç—Å—è</option>
            <option value="ready">üéÅ –ì–æ—Ç–æ–≤–æ –∫ –≤—Ä—É—á–µ–Ω–∏—é</option>
            <option value="shipped">üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ</option>
            <option value="delivered">üì¨ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ</option>
          </select>
          <button className="btn mt-2" onClick={saveStatus}>
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å
          </button>
        </div>
      </aside>

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      <main className="space-y-4">
        {/* NEW: –±–ª–æ–∫ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–±—Ä–æ—Å–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ */}
        <section className="paper p-4">
          <div className="flex items-center justify-between gap-3 flex-wrap">
            <h3 className="font-serif text-xl">–í–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</h3>
            <div className="text-muted">
              –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: <b>{questions.length}</b>
            </div>
          </div>

          <div className="grid gap-4 md:grid-cols-2 mt-3">
            {/* –û–¥–∏–Ω–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å */}
            <div className="paper p-4">
              <div className="font-semibold mb-2">–î–æ–±–∞–≤–∏—Ç—å –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å</div>
              <input
                className="input"
                placeholder="–í–∞—à —Å–∞–º—ã–π —Ç—ë–ø–ª—ã–π –º–æ–º–µ–Ω—Ç —ç—Ç–æ–≥–æ –≥–æ–¥–∞?"
                value={qSingle}
                onChange={(e) => setQSingle(e.target.value)}
              />
              <div className="text-sm text-muted mt-2">
                –í–æ–ø—Ä–æ—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º, –±–µ–∑ HTML ‚Äî XSS –±–µ–∑–æ–ø–∞—Å–Ω–æ.
              </div>
            </div>

            {/* –ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ */}
            <div className="paper p-4">
              <div className="font-semibold mb-2">–ú–∞—Å—Å–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞</div>
              <textarea
                className="input min-h-[120px]"
                placeholder="–ö–æ–≥–¥–∞ –≤—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å? $ –í–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ? $ –ß—Ç–æ –≤—ã —Ü–µ–Ω–∏—Ç–µ –¥—Ä—É–≥ –≤ –¥—Ä—É–≥–µ?"
                value={qBulk}
                onChange={(e) => setQBulk(e.target.value)}
              />
              <div className="text-sm text-muted mt-2">
                –†–∞–∑–¥–µ–ª—è–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Å–∏–º–≤–æ–ª–æ–º <b>$</b>. –ü—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –±—É–¥—É—Ç
                –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω—ã. –û–±—ä—ë–º—ã –≤ —Å–æ—Ç–Ω–∏ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è.
              </div>
            </div>
          </div>

          <div className="mt-3 flex items-center gap-3 flex-wrap">
            <label className="flex items-center gap-2">
              <input
                type="radio"
                name="mode"
                checked={mode === "append"}
                onChange={() => setMode("append")}
              />
              –î–æ–±–∞–≤–∏—Ç—å –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
            </label>
            <label className="flex items-center gap-2">
              <input
                type="radio"
                name="mode"
                checked={mode === "replace"}
                onChange={() => setMode("replace")}
              />
              –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω–∏—Ç—å
            </label>

            <button className="btn primary" onClick={pushQuestions}>
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            </button>
          </div>

          {/* –°–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –º—è–≥–∫–∏–º –≤–∏–¥–æ–º */}
          <div className="mt-4 grid gap-3">
            {questions.length === 0 ? (
              <div className="status">
                <span className="text-lg">üïäÔ∏è</span>
                <div>
                  <div className="font-semibold">
                    –ü–æ–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–≤–∏–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
                  </div>
                  <div className="text-muted">
                    ¬´–°–∫–æ—Ä–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã¬ª.
                  </div>
                </div>
              </div>
            ) : (
              questions.map((q, i) => (
                <div
                  key={i}
                  className="p-3 border border-line rounded-[14px] bg-paper flex items-start gap-3"
                >
                  <div className="w-6 h-6 grid place-items-center rounded-full bg-gradient-to-b from-gold to-blush text-[#5b5246] shrink-0">
                    {i + 1}
                  </div>
                  <div className="flex-1 whitespace-pre-wrap break-words">{q}</div>
                  <button
                    className="btn"
                    onClick={() => removeQuestionAt(i)}
                    title="–£–¥–∞–ª–∏—Ç—å –≤–æ–ø—Ä–æ—Å"
                  >
                    –£–¥–∞–ª–∏—Ç—å
                  </button>
                </div>
              ))
            )}
          </div>
        </section>

        {/* –†–∞–∑–¥–µ–ª —Å –æ—Ç–≤–µ—Ç–∞–º–∏ ‚Äî –∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ */}
        <section className="paper p-4">
          <h3 className="font-serif text-xl mb-2">–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</h3>
          <div className="space-y-3">
            {data.answers?.length ? (
              data.answers.map((a, i) => (
                <div
                  key={i}
                  className="p-3 border border-line rounded-[14px] bg-paper"
                >
                  <div className="text-muted text-sm mb-1">
                    –í–æ–ø—Ä–æ—Å {a.questionIndex + 1}
                  </div>
                  <div className="whitespace-pre-wrap break-words">{a.text || "-"}</div>
                </div>
              ))
            ) : (
              <div className="text-muted">–û—Ç–≤–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.</div>
            )}
          </div>
        </section>
      </main>
    </div>
  );
}
